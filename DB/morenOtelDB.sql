BEGIN;

-- bookings tablosu
CREATE TABLE IF NOT EXISTS public.bookings
(
    id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    booking_confirmation_code VARCHAR(255),
    check_in_date DATE NOT NULL,
    check_out_date DATE,
    num_of_adults INTEGER NOT NULL,
    num_of_children INTEGER NOT NULL,
    total_num_of_guest INTEGER NOT NULL,
    room_id BIGINT,
    user_id BIGINT,
    CONSTRAINT bookings_pkey PRIMARY KEY (id)
);

-- users tablosu
CREATE TABLE IF NOT EXISTS public.users
(
    id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    email VARCHAR(255) NOT NULL,
    name VARCHAR(255) NOT NULL,
    password VARCHAR(255) NOT NULL,
    phone_number VARCHAR(255),
    role VARCHAR(255),
    CONSTRAINT users_pkey PRIMARY KEY (id),
    CONSTRAINT uk6dotkott2kjsp8vw4d0m25fb7 UNIQUE (email)
);

-- rooms tablosu
CREATE TABLE IF NOT EXISTS public.rooms
(
    id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    room_description VARCHAR(255),
    room_photo_url VARCHAR(255),
    room_price NUMERIC(38, 2),
    room_type VARCHAR(255),
    CONSTRAINT rooms_pkey PRIMARY KEY (id)
);

-- bookings tablosu ile users tablosu arasındaki ilişki
ALTER TABLE IF EXISTS public.bookings
    ADD CONSTRAINT fkeyog2oic85xg7hsu2je2lx3s6 FOREIGN KEY (user_id)
    REFERENCES public.users (id)
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

-- bookings tablosu ile rooms tablosu arasındaki ilişki
ALTER TABLE IF EXISTS public.bookings
    ADD CONSTRAINT fkrgoycol97o21kpjodw1qox4nc FOREIGN KEY (room_id)
    REFERENCES public.rooms (id)
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

END;



SELECT *
FROM users


SELECT *
FROM bookings


SELECT *
FROM rooms


DROP TRIGGER trg_check_in_date


--Müşteri bir rezervasyon yaparken check-in tarihi bugünden önce olamaz.
CREATE OR REPLACE FUNCTION trg_check_in_date()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.check_in_date < CURRENT_DATE THEN
        RAISE EXCEPTION 'Check in tarihi uygun olmalıdır.';
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_check_in_date
BEFORE INSERT ON bookings
FOR EACH ROW
EXECUTE FUNCTION trg_check_in_date();



--Check-out tarihi, check-in tarihinden önce olamaz.
CREATE OR REPLACE FUNCTION trg_check_out_date()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.check_out_date <= NEW.check_in_date THEN
        RAISE EXCEPTION 'Uygun rezervasyon tarihi giriniz.';
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_check_out_date
BEFORE INSERT ON bookings
FOR EACH ROW
EXECUTE FUNCTION trg_check_out_date();




--Yetişkin ve çocuk sayısı
CREATE OR REPLACE FUNCTION check_adults_children_counts()
RETURNS TRIGGER AS $$
BEGIN
    -- Yetişkin sayısının en az 1 olması gerektiği kontrolü
    IF NEW.num_of_adults < 1 THEN
        RAISE EXCEPTION 'Lütfen yetişkinler için en az 1 sayı girin.';
    END IF;

    -- Çocuk sayısının en az 0 olması gerektiği kontrolü
    IF NEW.num_of_children < 0 THEN
        RAISE EXCEPTION 'Lütfen çocuklar için geçerli bir sayı girin (0 veya daha fazla).';
    END IF;

    -- Eğer herhangi bir hata yoksa, INSERT işlemi devam eder
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;


CREATE TRIGGER trg_check_adults_children
BEFORE INSERT ON bookings
FOR EACH ROW
EXECUTE FUNCTION check_adults_children_counts();







-- --Rezervasyon Sayısına Göre Kullanıcı Puanı
-- CREATE OR REPLACE FUNCTION trg_user_points()
-- RETURNS TRIGGER AS $$
-- BEGIN
--     UPDATE users
--     SET points = COALESCE(points, 0) + 10
--     WHERE id = NEW.user_id;
--     RETURN NEW;
-- END;
-- $$ LANGUAGE plpgsql;

-- CREATE TRIGGER trg_user_points
-- AFTER INSERT ON bookings
-- FOR EACH ROW
-- EXECUTE FUNCTION trg_user_points();



DROP FUNCTION sp_get_user_bookings
--Bir kullanıcının tüm rezervasyonlarını getiren bir prosedür.
CREATE OR REPLACE FUNCTION sp_get_user_bookings(p_user_id BIGINT)
RETURNS TABLE(
    id BIGINT, 
    check_in_date DATE, 
    check_out_date DATE, 
    booking_confirmation_code VARCHAR, 
    room_type VARCHAR, 
    room_price NUMERIC
) AS $$
BEGIN
    RETURN QUERY
    SELECT b.id, b.check_in_date, b.check_out_date, b.booking_confirmation_code, r.room_type, r.room_price
    FROM bookings b
    JOIN rooms r ON b.room_id = r.id
    WHERE b.user_id = p_user_id;
END;
$$ LANGUAGE plpgsql;


-- 3 numaralı kullanıcı için geçmiş rezervasyonları getirir.
SELECT * FROM sp_get_user_bookings(1);

select *
from bookings






--Son 7 gün içindeki tüm rezervasyonları listeler.
CREATE OR REPLACE FUNCTION sp_weekly_bookings_report()
RETURNS TABLE(id BIGINT, user_name VARCHAR, room_type VARCHAR, check_in_date DATE, check_out_date DATE) AS $$
BEGIN
    RETURN QUERY
    SELECT b.id, u.name, r.room_type, b.check_in_date, b.check_out_date
    FROM bookings b
    JOIN users u ON b.user_id = u.id
    JOIN rooms r ON b.room_id = r.id
    WHERE b.check_in_date >= CURRENT_DATE - INTERVAL '7 days';
END;
$$ LANGUAGE plpgsql;

-- Son 7 gün içindeki tüm rezervasyonları listelemek için fonksiyonu çağırmak
SELECT * FROM sp_weekly_bookings_report();




--Bir oda için aynı gün yapılan rezervasyon sayısını sınırlar
CREATE OR REPLACE FUNCTION trg_check_duplicate_booking_function()
RETURNS TRIGGER AS $$
DECLARE
    countBookings INT;
BEGIN
    SELECT COUNT(*) INTO countBookings
    FROM bookings
    WHERE room_id = NEW.room_id
    AND NEW.checkInDate BETWEEN checkInDate AND checkOutDate;
    
    IF countBookings > 0 THEN
        RAISE EXCEPTION 'Bu oda belirtilen tarihlerde zaten rezerve edilmiştir.';
    END IF;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;


CREATE TRIGGER trg_check_duplicate_booking
BEFORE INSERT ON bookings
FOR EACH ROW
EXECUTE FUNCTION trg_check_duplicate_booking_function();

DROP TRIGGER trg_check_duplicate_booking ON bookings;




select *
from rooms

--Boş olan odaların toplam sayısını döndürür.
CREATE OR REPLACE FUNCTION sp_available_rooms_count()
RETURNS INTEGER AS $$
DECLARE
    availableRooms INTEGER;
BEGIN
    SELECT COUNT(*) INTO availableRooms
    FROM rooms
    
    RETURN availableRooms;
END;
$$ LANGUAGE plpgsql;

-- Bu fonksiyonu çalıştırmak için:
SELECT sp_available_rooms_count();



DROP FUNCTION IF EXISTS get_available_rooms(date, date);

--Belirli bir tarih aralığında uygun olan odaları getirir.
CREATE OR REPLACE FUNCTION get_available_rooms(start_date DATE, end_date DATE)
RETURNS TABLE(id BIGINT, room_type VARCHAR, room_price DECIMAL) AS $$
BEGIN
    RETURN QUERY
    SELECT r.id, r.room_type, r.room_price
    FROM rooms r
    WHERE r.id NOT IN (
        SELECT room_id FROM bookings
        WHERE check_in_date < end_date AND check_out_date > start_date
    );
END;
$$ LANGUAGE plpgsql;


-- Prosedürü çağırma
SELECT * FROM get_available_rooms('2024-12-30', '2025-01-05');





DROP FUNCTION update_room_prices
--Belirli bir oda tipindeki tüm odaların fiyatlarını belirli bir yüzde kadar artırır.
CREATE OR REPLACE FUNCTION update_room_prices(new_room_type VARCHAR, percentage DOUBLE PRECISION)
RETURNS VOID AS $$
BEGIN
    UPDATE rooms
    SET room_price = room_price + (room_price * (percentage / 100))
    WHERE room_type = new_room_type;  -- Parametre ismini burada değiştirdik
END;
$$ LANGUAGE plpgsql;


-- Fonksiyonu çağırma
SELECT update_room_prices('Deluxe', 10);


select *
from rooms




DROP FUNCTION daily_room_occupancy
--Belirli bir gün için tüm odaların doluluk durumunu raporlar.
CREATE OR REPLACE FUNCTION daily_room_occupancy(report_date DATE)
RETURNS TABLE(room_id BIGINT, room_type VARCHAR, availability VARCHAR) AS $$
BEGIN
    RETURN QUERY
    SELECT r.id AS room_id, r.room_type,
           CASE 
               WHEN EXISTS (
                   SELECT 1 FROM bookings b
                   WHERE b.room_id = r.id 
                     AND report_date BETWEEN b.check_in_date AND b.check_out_date
               ) THEN 'Busy'::VARCHAR
               ELSE 'Available'::VARCHAR 
           END AS availability
    FROM rooms r;
END;
$$ LANGUAGE plpgsql;


-- Fonksiyonu çağırma
SELECT * FROM daily_room_occupancy('2024-12-28');




------------------------------------------------------------------------------------------------------------------

--------------------------------------------PROCEDURE'S---------------------------------------------------------

------------------------------------------------------------------------------------------------------------------


Select *
from rooms


DROP PROCEDURE sp_adjust_room_price

--Bu prosedür, belirli bir oda tipinin fiyatını artırır veya azaltır.
CREATE OR REPLACE PROCEDURE sp_adjust_room_price(
    p_room_type VARCHAR,
    price_adjustment DECIMAL
)
LANGUAGE plpgsql
AS $$
BEGIN
    -- Fiyat güncelleme
    UPDATE rooms
    SET room_price = room_price + price_adjustment
    WHERE room_type = p_room_type; 
$$;

--Odalarının fiyatına artış yapma
CALL sp_adjust_room_price('Premium', 50);


select * 
from rooms





drop PROCEDURE sp_create_booking

--Bu prosedür, bir kullanıcı için rezervasyon işlemini yapar. Kullanıcı, oda tipi, giriş ve çıkış tarihi gibi bilgileri sağlar.
CREATE OR REPLACE PROCEDURE sp_create_booking(
    booking_confirmation_code VARCHAR,  -- booking_confirmation_code
    check_in_date_param DATE,           -- check_in_date
    check_out_date_param DATE,          -- check_out_date
    num_of_adults INTEGER,              -- num_of_adults
    num_of_children INTEGER,            -- num_of_children
    total_num_of_guests INTEGER,       -- total_num_of_guests
    room_id_param BIGINT,               -- room_id
    user_id BIGINT                      -- user_id
)
LANGUAGE plpgsql
AS $$
DECLARE
    count_bookings INT;
BEGIN
    -- Aynı odanın belirtilen tarihlerde başka bir rezervasyonunun olup olmadığını kontrol et
    SELECT COUNT(*) INTO count_bookings
    FROM bookings b
    WHERE b.room_id = room_id_param 
      AND b.check_in_date <= check_out_date_param
      AND b.check_out_date >= check_in_date_param;

    IF count_bookings > 0 THEN
        -- Çakışma varsa hata fırlat
        RAISE EXCEPTION 'Bu oda belirtilen tarihlerde zaten rezerve edilmiştir.';
    ELSE
        -- Çakışma yoksa rezervasyonu oluştur
        INSERT INTO bookings(
            booking_confirmation_code, 
            check_in_date, 
            check_out_date, 
            num_of_adults, 
            num_of_children, 
            total_num_of_guests, 
            room_id, 
            user_id
        )
        VALUES (
            booking_confirmation_code, 
            check_in_date_param, 
            check_out_date_param, 
            num_of_adults, 
            num_of_children, 
            total_num_of_guests, 
            room_id_param, 
            user_id
        );
    END IF;
END;
$$;


CALL sp_create_booking(
    'ASOC5KGAY3',   -- booking_confirmation_code
    '2025-09-03',    -- check_in_date
    '2025-09-10',    -- check_out_date
    2,               -- num_of_adults
    1,               -- num_of_children
    3,               -- total_num_of_guests
    8,               -- room_id
    5                -- user_id
);



select *
from bookings


DROP PROCEDURE sp_daily_revenue
CREATE OR REPLACE PROCEDURE sp_daily_revenue(
    revenue_date DATE
)
LANGUAGE plpgsql
AS $$
DECLARE
    total_revenue NUMERIC;
BEGIN
    SELECT SUM(r.room_price)
    INTO total_revenue
    FROM bookings b
    JOIN rooms r ON b.room_id = r.id
    WHERE b.check_in_date <= revenue_date AND b.check_out_date >= revenue_date;

    RAISE NOTICE 'Total Revenue: %', total_revenue;
END;
$$;



-- 2024-12-25 için günlük geliri hesaplama
CALL sp_daily_revenue('2024-12-25');




drop PROCEDURE sp_user_booking_count
--Bu prosedür, belirli bir kullanıcının yaptığı toplam rezervasyon sayısını döndüren bir prosedürdür.
CREATE OR REPLACE PROCEDURE sp_user_booking_count(
    p_user_id BIGINT,  -- Parametreyi 'p_user_id' olarak adlandıralım
    OUT total_bookings INT
)
LANGUAGE plpgsql
AS $$
BEGIN
    -- Kullanıcıya ait toplam rezervasyon sayısını hesaplama
    SELECT COUNT(*) INTO total_bookings
    FROM bookings
    WHERE bookings.user_id = p_user_id;  -- Burada 'p_user_id' parametresini kullandık
END;
$$;



-- Kullanıcı ID'si 1 için toplam rezervasyon sayısını döndürme
DO $$
DECLARE
    total_bookings INT;
BEGIN
    -- Prosedürü çağırma
    CALL sp_user_booking_count(1, total_bookings);
    -- Sonucu görmek için
    RAISE NOTICE 'Total Bookings: %', total_bookings;
END;
$$;



-- DROP PROCEDURE sp_update_room_status
-- --Bu prosedür, belirli bir odanın durumunu günceller 
-- CREATE OR REPLACE PROCEDURE sp_update_room_status(
--     room_id BIGINT,
--     new_status VARCHAR
-- )
-- LANGUAGE plpgsql
-- AS $$
-- BEGIN
--     -- Oda durumunu güncelleme (örneğin 'availability' sütunu kullanılıyor)
--     UPDATE rooms
--     SET availability = new_status  -- 'room_status' yerine 'availability' kullanıyoruz
--     WHERE id = room_id;
-- END;
-- $$;




-- -- 2 numaralı odanın durumunu 'Under Maintenance' olarak güncelleme
-- CALL sp_update_room_status(4, 'Available');

select *
from rooms


select *
from rooms